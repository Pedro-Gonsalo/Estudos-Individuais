unit uLembreteDAO;

interface

uses uLembrete, classes, DB, SysUtils, generics.defaults,
     generics.collections, Dialogs, uDM, uBaseDAO, FireDAC.Comp.Client;

type
  TLembreteDAO = class(TBaseDAO)
  private
    _Ds : TFDQuery;
    FListaLembrete: TObjectList<TLembrete>;
    procedure PreencherLista(Ds: TFDQuery);
  public
    constructor Create;
    destructor Destroy; override;
    function Inserir(pLembrete: TLembrete): Boolean;
    function Deletar(pLembrete: TLembrete): Boolean;
    function Alterar(pLembrete: TLembrete): Boolean;
    function ListarPorTitulo_Descricao(pConteudo: String): TObjectList<TLembrete>;
  end;

implementation

constructor TLembreteDAO.Create;
begin
  inherited;
  FListaLembrete := TObjectList<TLembrete>.create;
  _Ds := TFDQuery.Create(Nil);
end;

destructor TLembreteDAO.Destroy;
begin
  try
    if Assigned(_Ds) then
      FreeAndNil(_Ds);
    if Assigned(FListaLembrete) then
      FreeAndNil(FListaLembrete);
    //inherited;
  except
    on e: exception do
      raise Exception.Create(E.Message);
  end;
end;

function TLembreteDAO.Inserir(pLembrete: TLembrete): Boolean;
var
  Sql: String;
begin
  Sql := ' INSERT INTO Lembrete (Titulo, Descricao, DataHora) '+
         ' VALUES ( '+
                   QuotedStr(pLembrete.Titulo) + ',' +
                   QuotedStr(pLembrete.Descricao) + ',' +
                   'sysdate() '+     //PEGAR DT/HR DO S.O.
                   ')';
  Result := ExecutarComando(Sql) > 0;
end;

function TLembreteDAO.Alterar(pLembrete: TLembrete): Boolean;
var
  Sql: String;
begin
  Sql := ' UPDATE Lembrete '+
         '    SET Titulo    = ' + QuotedStr(pLembrete.Titulo) + ', ' +
         '        Descricao = ' + QuotedStr(pLembrete.Descricao) +
         '  WHERE IDLembrete = ' + IntToStr(pLembrete.IDLembrete);
  Result := ExecutarComando(Sql) > 0;
end;

function TLembreteDAO.Deletar(pLembrete: TLembrete): Boolean;
var
  Sql: String;
begin
  Sql := ' DELETE                                 '+
         '   FROM Lembrete                        '+
         '  WHERE IDLembrete = ' + IntToStr(pLembrete.IDLembrete) ;
  Result := ExecutarComando(Sql) > 0;
end;

procedure TLembreteDAO.PreencherLista(Ds: TFDQuery);// mudar para PreencherColecao
var                                                 // try except
  I: Integer;
begin
  exit;
  I := 0;
  FListaLembrete.Clear;
  while not Ds.eof do
  begin
    FListaLembrete.Add(TLembrete.Create);
    FListaLembrete[I].IDLembrete := Ds.FieldByName('IDLembrete').AsInteger;
    FListaLembrete[I].Titulo     := Ds.FieldByName('Titulo'    ).AsString;
    FListaLembrete[I].Descricao  := Ds.FieldByName('Descricao' ).AsString;
    FListaLembrete[I].DataHora   := Ds.FieldByName('DataHora'  ).AsDateTime;
    Ds.Next;
    I := I + 1;
  end;
end;

function TLembreteDAO.ListarPorTitulo_Descricao(pConteudo: String): TObjectList<TLembrete>;
var
  Sql: String;

  I: Integer;
begin
  Result := Nil;
  Sql := ' SELECT C.IDLembrete, C.Titulo,             '+
         '        C.Descricao, C.DataHora             '+
         '   FROM Lembrete C                          '+
         '  WHERE C.Titulo    like ' + QuotedStr('%'+pConteudo+'%')+
         '     OR C.Descricao like ' + QuotedStr('%'+pConteudo+'%')+
         '  ORDER BY DataHora                         ';
  _Ds := RetornarDataSet(Sql);

  I := 0;
  FListaLembrete.Clear;
  while not _Ds.eof do
  begin
    FListaLembrete.Add(TLembrete.Create);
    FListaLembrete[I].IDLembrete := _Ds.FieldByName('IDLembrete').AsInteger;
    FListaLembrete[I].Titulo     := _Ds.FieldByName('Titulo'    ).AsString;
    FListaLembrete[I].Descricao  := _Ds.FieldByName('Descricao' ).AsString;
    FListaLembrete[I].DataHora   := _Ds.FieldByName('DataHora'  ).AsDateTime;
    _Ds.Next;
    I := I + 1;
  end;

  if not (_Ds.IsEmpty) then
  begin
   // PreencherLista(_Ds);
    Result := FListaLembrete;
   // FreeAndNil(_Ds);
  end;
end;

end.
